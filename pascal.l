%{
//author:liang_jk student_id:2016202101
//generated by flex2.6.4

#include<stdlib.h>
#include<string.h>
#include"pascal.h"
#include"pascal.tab.h"

char text_buffer[256];

%}

ln (\r?\n)
digit ([0-9])
integer ({digit}+)
alpha ([A-Za-z])

%%
 /* Beginning of the key words */
AND {return AND;}
ARRAY {return ARRAY;}
BEGIN {return BEGINN;}
CASE {return CASE;}
CONST {return CONST;}
DIV {return DIV;}
DO {return DO;}
DOWNTO {return DOWNTO;}
ELSE {return ELSE;}
END {return ENDD;}
FOR {return FOR;}
FUNCTION {return FUNCTION;}
GOTO {return GOTO;}
IF {return IF;}
LABEL {return LABEL;}
MOD {return MOD;}
NIL {return NIL;}
NOT {return NOT;}
OF {return OF;}
OR {return OR;}
PROCEDURE {return PROCEDURE;}
PROGRAM {return PROGRAM;}
RECORD {return RECORD;}
REPEAT {return REPEAT;}
THEN {return THEN;}
TO {return TO;}
TYPE {return TYPE;}
UNTIL {return UNTIL;}
VAR {return VAR;}
WHILE {return WHILE;}
XOR {return XOR;}
CALL {return CALL;}
 /* End of the key words */

 /* Beginning of the constants */
FALSE {yylval.val=0;return BOOL;}
TRUE {yylval.val=1;return BOOL;}
\'.\' {yylval.val=yytext[1];return CHAR;}//String is not considered.
{integer} {memset(text_buffer,0,256);strncpy(text_buffer,yytext,yyleng);yylval.val=atoi(text_buffer);return INTEGER;}//Deal the +/- before numbers as a oprator.
{integer}(\.{integer})?([Ee][\-\+]?{integer})? {memset(text_buffer,0,256);strncpy(text_buffer,yytext,yyleng);yylval.double_val=atof(text_buffer);return REAL;}//Deal the +/- before numbers as a oprator.
 /* End of the constants */

 /* Beginning of the identifiers */
MAXINT {yylval.val=2147483647;return INTEGER;}
integer {return INTEGER_TYPE;}//Deal integer as int32.
real {return REAL_TYPE;}
char {return CHAR_TYPE;}
boolean {return BOOL_TYPE;}
input {return INPUT;}
output {return OUTPUT;}
abs {return ABS;}
arctan {return ARCTAN;}
chr {return CHR;}
cos {return COS;}
eof {return EOFF;}
eoln {return EOLN;}
exp {return EXP;}
ln {return LN;}
odd {return ODD;}
ord {return ORD;}
pred {return PRED;}
round {return ROUND;}
sin {return SIN;}
sqr {return SQR;}
sqrt {return SQRT;}
succ {return SUCC;}
trunc {return TRUNC;}
new {return NEW;}
read {return READ;}
readln {return READLN;}
write {return WRITE;}
writeln {return WRITELN;}
 /* Common identifiers */
{alpha}({alpha}|{digit}){0,7}  {memset(yylval.id,0,sizeof(yylval.id));strncpy(yylval.id,yytext,yyleng);return ID;}
 /* End of the identifiers */

 /* Beginning of the operators */
\+ {return PLUS;}
\- {return MINUS;}
\* {return TIME;}
\/ {return DIVIDE;}
\= {return EQUAL;}
\<\> {return NOT_EQUAL;}
\<\= {return L_OR_E;}
\>\= {return G_OR_E;}
\< {return LESS;}
\> {return GREATER;}
 /* End of the operators */

 /* Beginning of the delimiters */
\( {return LB1;}
\) {return RB1;}
\[ {return LB2;}
\] {return RB2;}
\:\= {return ASSIGN;}
\, {return COMMER;}
\. {return DOT;}
\: {return COLON;}
\.\. {return DDOT;}
\; {return SEMI;}
 /* End of the delimiters */

 /* The others */
\{[^\{\}]+\} {return yylex();} /* Notes */
\^ {return HAT;}
{ln} {return yylex();}
[^ \t] {return ERROR;}
{alpha}({alpha}|{digit}){8,} {return LONGID;} /* Too long identifiers */
. {return yylex();} /* Default rule */
%%
int yywrap()
{
	return 1;
}
